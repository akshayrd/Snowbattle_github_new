    //
    //  HelloWorldLayer.m
    //  cocos2dsimplegame
    //
    //  Created by Student on 9/15/13.
    //  Copyright gpadmin 2013. All rights reserved.
    //


    // Import the interfaces
    #import "HelloWorldLayer.h"

    // Needed to obtain the Navigation Controller
    #import "AppDelegate.h"

    #pragma mark - HelloWorldLayer

    // HelloWorldLayer implementation
    @implementation HelloWorldLayer


    // Helper class method that creates a Scene with the HelloWorldLayer as the only child.
    +(CCScene *) scene
    {
        // 'scene' is an autorelease object.
        CCScene *scene = [CCScene node];
        
        // 'layer' is an autorelease object.
        HelloWorldLayer *layer = [HelloWorldLayer node];
        
        // add layer as a child to scene
        [scene addChild: layer];
        
        // return the scene
        return scene;
    }
    - (void) addMonster
    {
        
        CGSize winSize = [CCDirector sharedDirector].winSize;
        int realX = winSize.width/2;
        int realY = 700;
        CGPoint realDest = ccp(realX, realY);
        
        
        int realX1 = winSize.width-20;
        int realY1 = 720;
        
        int realX2 = winSize.width-20;
        int realY2 = winSize.height/2;
        
        int realX3 = winSize.width/2;
        int realY3 = winSize.height/2;
        
        CGPoint realDest1 = ccp(realX1, realY1);
        CGPoint realDest2 = ccp(realX2, realY2);
        CGPoint realDest3 = ccp(realX3, realY3);
        
        float realMoveDuration = 1;
        
        id actionMove = [CCMoveTo actionWithDuration:realMoveDuration position:realDest];
        id actionRotate = [CCRotateBy actionWithDuration:realMoveDuration/10 angle:90];
        id actionMove1 = [CCMoveTo actionWithDuration:realMoveDuration position:realDest1];
        id actionMove2 = [CCMoveTo actionWithDuration:realMoveDuration position:realDest2];
        id actionMove3 = [CCMoveTo actionWithDuration:realMoveDuration position:realDest3];
        
        
        id actionMoveDone = [CCCallFuncN actionWithTarget:self selector:@selector(finishedMoving:)];
        
        [monster runAction:
         [CCSequence actions: actionMove,actionRotate,actionMove1,actionRotate,actionMove2,actionRotate,actionMove3,actionRotate,nil]];
        
        
    }

    - (void) addMonsterfreeze
    {
        float realMoveDuration = 10;
        id actionRotate = [CCRotateBy actionWithDuration:realMoveDuration/10 angle:90];
        [monster2 runAction:
         [CCSequence actions: actionRotate,nil]];

    }

    -()gameLogic:(ccTime)dt ;
    {
        [self addMonster];
    }

    -()gameLogic1:(ccTime)dt ;
    {
        [self addMonsterfreeze];
    }

    CCSprite *monster;
    CCSprite *monster2;

    // on "init" you need to initialize your instance
    -(id) init
    {
        // always call "super" init
        // Apple recommends to re-assign "self" with the "super's" return value
    /*	if ((self = [super initWithColor:ccc4(255,255,255,255)]))
        
        {
      */
        if( (self=[super init]) ) {
            self.touchEnabled = YES;
            // self.theMap = [CCTMXTiledMap tiledMapWithTMXFile:@"Tiled_Map_Snow.tmx"];
            bgLayer = [_tileMap layerNamed:@"bg"];
            
            _tileMap = [CCTMXTiledMap tiledMapWithTMXFile:@"Snow_Battle_Tiled.tmx"];
            for(CCTMXLayer *child in [_tileMap children])
            {
                [[child texture] setAliasTexParameters];
            }
            self.anchorPoint = ccp(0,0);
            [self addChild:_tileMap z:-1];
            
            // This loop obtains the coordinates of the tilemap and displays them in each tile.
            
            CCLabelTTF *label;
            NSString * xystring;
            
            for( int x=0; x<_tileMap.mapSize.width;x++) {
                for( int y=0; y< _tileMap.mapSize.height; y++ ) {
                    int tileX = x * _tileMap.tileSize.width + _tileMap.tileSize.width/2;
                    int tileY = (_tileMap.mapSize.height - y) * (_tileMap.tileSize.height) -_tileMap.tileSize.height/2;
                    
                    xystring = [NSString stringWithFormat:@"(%i,%i)",x,y];
                    label = [CCLabelTTF labelWithString:xystring fontName:@"Helvetica" fontSize:12];
                    label.position =  ccp(tileX,tileY);
                    [self addChild: label z:1];
                }
            }
                CGSize winSize = [CCDirector sharedDirector].winSize;
                player = [CCSprite spriteWithFile:@"player.jpg"];
                player.position = ccp(10,720);
                if(player == nil)
                {
                    printf("this is an error");
                }
                [self addChild:player];
           
            monster = [CCSprite spriteWithFile:@"monster.jpg"];
            monster.position = ccp(winSize.width/2, winSize.height/2);
            [self addChild:monster];
            
            monster2 = [CCSprite spriteWithFile:@"monster.jpg"];
            monster2.position = ccp(winSize.width/3, winSize.height-310);
            [self addChild:monster2];
            
            CCSprite *monster3 = [CCSprite spriteWithFile:@"monster.jpg"];
            monster3.position = ccp(winSize.width-50, winSize.height-40);
            [self addChild:monster3];
            
            CCSprite *monster4 = [CCSprite spriteWithFile:@"monster.jpg"];
            monster4.position = ccp(winSize.width-20, winSize.height/3);
            [self addChild:monster4];
            
     
            int realX = winSize.width/2;
            int realY = 720;
            CGPoint realDest = ccp(realX, realY);
            
            int realX1 = winSize.width/2;
            int realY1 = winSize.height/2;
            CGPoint realDest1 = ccp(realX1, realY1);
            
            float realMoveDuration = 10;
            //id actionRotate1 = [CCRotateBy actionWithDuration:realMoveDuration/10 angle:90];
            id actionMove = [CCMoveTo actionWithDuration:realMoveDuration position:realDest];
            id actionRotate = [CCRotateBy actionWithDuration:realMoveDuration/10 angle:90];
            id actionMove1 = [CCMoveTo actionWithDuration:realMoveDuration position:realDest1];
            
            id actionMoveDone = [CCCallFuncN actionWithTarget:self selector:@selector(finishedMoving:)];
            
            [player runAction:
             [CCSequence actions: actionRotate,actionMove,actionRotate,actionMove1,nil]];
            
            //[self addMonster];
            [self schedule:@selector(gameLogic1: ) interval:1  ];return self;
            //[monster1 runAction:
             //[CCSequence actions: actionMove,actionRotate,actionMove1,actionMoveDone,nil]];
            [self schedule:@selector(gameLogic: ) interval:10  ];return self;
            
          
            

            /*
            // Create the actions
            CCMoveTo * actionMove = [CCMoveTo actionWithDuration:actualDuration
                                                        position:ccp(+player.contentSize.width/2, actualY-20)];
            CCCallBlockN * actionMoveDone = [CCCallBlockN actionWithBlock:^(CCNode *node) {
                [node removeFromParentAndCleanup:YES];
            }];
            [player runAction:[CCSequence actions:actionMove, actionMoveDone, nil]];
    */
            
        }
        
        return self;
    }

    #pragma mark GameKit delegate

    -(void) achievementViewControllerDidFinish:(GKAchievementViewController *)viewController
    {
        AppController *app = (AppController*) [[UIApplication sharedApplication] delegate];
        [[app navController] dismissModalViewControllerAnimated:YES];
    }

    -(void) leaderboardViewControllerDidFinish:(GKLeaderboardViewController *)viewController
    {
        AppController *app = (AppController*) [[UIApplication sharedApplication] delegate];
        [[app navController] dismissModalViewControllerAnimated:YES];
    }

    @end





























































































































































































































































































































































































































































































































